name: DNS: Spaceship Upsert
on:
  workflow_dispatch:
    inputs:
      subdomain:
        description: "Subdomain to map to GitHub Pages (e.g., studio)"
        required: true
        default: "studio"
      domains:
        description: "Comma-separated domain list (defaults to Key Vault value or dlxstudios.ai)"
        required: false
      pages_owner:
        description: "GitHub Pages host owner (defaults to repo owner: <owner>.github.io)"
        required: false

permissions:
  contents: write
  pull-requests: write
  actions: write
  id-token: write

env:
  # GH Pages REST API will set the custom domain at the repo level
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_NAME:  ${{ github.event.repository.name }}

jobs:
  upsert-dns:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      # 1) Azure OIDC login (no secrets in GH)
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id:       ${{ vars.AZURE_CLIENT_ID }}
          tenant-id:       ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      # 2) Pull Spaceship creds + optional domain list from Key Vault
      - name: Fetch Spaceship credentials from Key Vault
        id: kv
        uses: azure/CLI@v2
        with:
          inlineScript: |
            set -e
            KEY=$(az keyvault secret show --vault-name "${{ vars.KEYVAULT_NAME }}" --name "SPACESHIP_API_KEY"    --query value -o tsv)
            SEC=$(az keyvault secret show --vault-name "${{ vars.KEYVAULT_NAME }}" --name "SPACESHIP_API_SECRET" --query value -o tsv)
            DOM=$(az keyvault secret show --vault-name "${{ vars.KEYVAULT_NAME }}" --name "SPACESHIP_DOMAIN_LIST" --query value -o tsv || echo "")
            echo "key=$KEY" >> $GITHUB_OUTPUT
            echo "secret=$SEC" >> $GITHUB_OUTPUT
            echo "domains=$DOM" >> $GITHUB_OUTPUT

      # 3) Compute targets: domain list + GH Pages host for CNAME
      - name: Compute targets
        id: plan
        run: |
          set -e
          # Domain list precedence: input > KV > default
          DOMAINS_RAW="${{ github.event.inputs.domains }}"
          if [ -z "$DOMAINS_RAW" ]; then DOMAINS_RAW="${{ steps.kv.outputs.domains }}"; fi
          if [ -z "$DOMAINS_RAW" ]; then DOMAINS_RAW="dlxstudios.ai"; fi
          echo "DOMAINS_RAW=$DOMAINS_RAW"

          # Pages host: input pages_owner || repo_owner
          PAGES_OWNER="${{ github.event.inputs.pages_owner }}"
          if [ -z "$PAGES_OWNER" ]; then PAGES_OWNER="${{ env.REPO_OWNER }}"; fi

          SUBDOMAIN="${{ github.event.inputs.subdomain }}"
          CNAME_TARGET="${PAGES_OWNER}.github.io"

          echo "subdomain=$SUBDOMAIN"        >> $GITHUB_OUTPUT
          echo "pages_host=$CNAME_TARGET"    >> $GITHUB_OUTPUT
          echo "domains_csv=$DOMAINS_RAW"    >> $GITHUB_OUTPUT

      # 4) Upsert CNAME at Spaceship via API (idempotent)
      #    We only touch the one subdomain CNAME and leave all M365 records intact.
      - name: Upsert CNAME records (Spaceship API)
        env:
          API_BASE: "https://spaceship.dev/api/v1"
          X_API_KEY:    ${{ steps.kv.outputs.key }}
          X_API_SECRET: ${{ steps.kv.outputs.secret }}
          SUBDOMAIN:    ${{ steps.plan.outputs.subdomain }}
          TARGET:       ${{ steps.plan.outputs.pages_host }}
          DOMAINS_CSV:  ${{ steps.plan.outputs.domains_csv }}
        run: |
          set -e
          IFS=',' read -ra DOMAINS <<< "$DOMAINS_CSV"

          for DOMAIN in "${DOMAINS[@]}"; do
            DOMAIN_TRIM=$(echo "$DOMAIN" | xargs)
            echo "::group::Processing $SUBDOMAIN.$DOMAIN_TRIM -> $TARGET (CNAME)"
            # --- List existing DNS records for domain ---
            # Auth per Spaceship API (X-API-Key / X-API-Secret)
            # Note: The DNS endpoints are part of Spaceship's v1 API (dnsrecords read/write scopes).
            # See docs: https://docs.spaceship.dev/
            RESP=$(curl -sS -X GET \
              -H "X-API-Key: $X_API_KEY" -H "X-API-Secret: $X_API_SECRET" \
              "$API_BASE/domains/$DOMAIN_TRIM/dns-records")
            # Extract record id if CNAME $SUBDOMAIN exists
            HAVE=$(echo "$RESP" | jq -r --arg n "$SUBDOMAIN" '.items[]? | select(.type=="CNAME" and .name==$n) | .id' || true)

            if [ -n "$HAVE" ] && [ "$HAVE" != "null" ]; then
              echo "Existing CNAME found (id=$HAVE). Updating value to $TARGET"
              curl -sS -X PATCH \
                -H "Content-Type: application/json" \
                -H "X-API-Key: $X_API_KEY" -H "X-API-Secret: $X_API_SECRET" \
                -d "{\"records\":[{\"id\":\"$HAVE\",\"type\":\"CNAME\",\"name\":\"$SUBDOMAIN\",\"value\":\"$TARGET\",\"ttl\":300}]}" \
                "$API_BASE/domains/$DOMAIN_TRIM/dns-records" > /dev/null
            else
              echo "No existing CNAME; creating"
              curl -sS -X POST \
                -H "Content-Type: application/json" \
                -H "X-API-Key: $X_API_KEY" -H "X-API-Secret: $X_API_SECRET" \
                -d "{\"records\":[{\"type\":\"CNAME\",\"name\":\"$SUBDOMAIN\",\"value\":\"$TARGET\",\"ttl\":300}]}" \
                "$API_BASE/domains/$DOMAIN_TRIM/dns-records" > /dev/null
            fi
            echo "::endgroup::"
          done

      # 5) Tell GitHub Pages which custom domain to serve (no CNAME file needed when using Actions deploy)
      #    (PATCH/PUT Pages API to set CNAME + source build type)
      - name: Set GitHub Pages custom domain
        uses: actions/github-script@v7
        with:
          script: |
            const [owner,repo] = process.env.GITHUB_REPOSITORY.split('/');
            const sub = `${{ steps.plan.outputs.subdomain }}`;
            const domains = `${{ steps.plan.outputs.domains_csv }}`.split(',').map(s => s.trim());
            for (const d of domains) {
              const cname = `${sub}.${d}`;
              // Set custom domain + confirm build_type workflow so the Actions deployment serves it
              await github.request('PUT /repos/{owner}/{repo}/pages', {
                owner, repo,
                cname,
                build_type: 'workflow',
                source: { branch: context.payload.repository.default_branch, path: '/docs' }
              });
            }

      # 6) (Optional) Verify DNS resolution (non-blocking)
      - name: Quick DNS verify (best-effort)
        continue-on-error: true
        run: |
          sudo apt-get update -y && sudo apt-get install -y dnsutils
          for D in $(echo "${{ steps.plan.outputs.domains_csv }}" | tr ',' ' '); do
            host "${{ steps.plan.outputs.subdomain }}.$D"
          done
