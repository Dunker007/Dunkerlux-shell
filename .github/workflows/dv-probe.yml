name: DLX DV Probe

on:
  workflow_dispatch:

permissions:
  contents: read

env:
  TENANT_ID: ${{ secrets.TENANT_ID }}
  AAD_APP_ID: ${{ secrets.AAD_APP_ID }}
  AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}
  DEV_ENV_URL: ${{ secrets.DEV_ENV_URL }}
  GRAPH_USER_UPN: ${{ secrets.GRAPH_USER_UPN }} # e.g., youruser@DunkerLuxStudios.onmicrosoft.com

jobs:
  probe:
    name: Probe DV + Teams Workflows posture + OneDrive HUD write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      # PowerShell is already available on ubuntu-latest; just use shell: pwsh
      - name: Generate Access Tokens (Dataverse + Graph)
        id: tokens
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not $env:TENANT_ID -or -not $env:AAD_APP_ID -or -not $env:AAD_CLIENT_SECRET -or -not $env:DEV_ENV_URL) {
            throw "Missing one or more secrets: TENANT_ID, AAD_APP_ID, AAD_CLIENT_SECRET, DEV_ENV_URL"
          }
          $dvResource    = ($env:DEV_ENV_URL.TrimEnd('/')) + "/.default"
          $graphResource = "https://graph.microsoft.com/.default"

          function Get-AppToken($resource) {
            Invoke-RestMethod -Method Post -Uri "https://login.microsoftonline.com/$($env:TENANT_ID)/oauth2/v2.0/token" -ContentType "application/x-www-form-urlencoded" -Body @{
              client_id     = $env:AAD_APP_ID
              scope         = $resource
              client_secret = $env:AAD_CLIENT_SECRET
              grant_type    = "client_credentials"
            } | Select-Object -ExpandProperty access_token
          }

          $dvToken    = Get-AppToken $dvResource
          $graphToken = Get-AppToken $graphResource

          "dv_token=$dvToken"       | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "graph_token=$graphToken" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Probe Dataverse â€” Solutions / Env Vars / Connection References
        id: dvcheck
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $dv = "${{ env.DEV_ENV_URL }}".TrimEnd('/')
          $dvToken = "${{ steps.tokens.outputs.dv_token }}"

          function Get-Dv($path) {
            Invoke-RestMethod -Headers @{ Authorization = "Bearer $dvToken" } `
