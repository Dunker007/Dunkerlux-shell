---FILE: .github/workflows/monolith-split-pr.yml---
name: DLX Monolith Splitter (PR Mode)

on:
  push:
    branches: [ deploy/coming-soon ]
    paths:
      - '.bootstrap/monolith.mem'

permissions:
  contents: write
  pull-requests: write

jobs:
  split-open-pr:
    name: Split monolith & open PR
    runs-on: ubuntu-latest
    concurrency:
      group: monolith-split-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute branch name
        id: vars
        run: |
          ts=$(date -u +"%Y%m%d-%H%M%S")
          echo "branch=monolith-split-${ts}" >> "$GITHUB_OUTPUT"

      - name: Split monolith into files
        id: split
        shell: bash
        run: |
          set -euo pipefail
          FILE=".bootstrap/monolith.mem"
          if [ ! -f "$FILE" ]; then
            echo "Monolith file not found: $FILE"
            exit 1
          fi

          python3 - << 'PY'
import os, io, re, pathlib

monolith_path = ".bootstrap/monolith.mem"
out_list_path = ".github/monolith_split_files.txt"
pathlib.Path(os.path.dirname(out_list_path)).mkdir(parents=True, exist_ok=True)

with io.open(monolith_path, "r", encoding="utf-8") as f:
    data = f.read()

files = []
current_path = None
buf = []

def flush():
    global current_path, buf, files
    if current_path is None:
        return
    outp = "/".join([p for p in current_path.split("/") if p not in ("", ".", "..")])
    d = os.path.dirname(outp)
    if d:
        pathlib.Path(d).mkdir(parents=True, exist_ok=True)
    with io.open(outp, "w", encoding="utf-8", newline="\n") as w:
        w.write("".join(buf))
    files.append(outp)
    buf.clear()

for line in data.splitlines(keepends=True):
    m = re.match(r"^\s*---FILE:\s*(.+?)\s*---\s*$", line)
    if m:
        flush()
        current_path = m.group(1).strip()
        continue
    if re.match(r"^\s*---END FILE---\s*$", line):
        flush()
        current_path = None
        continue
    if current_path is not None:
        buf.append(line)

flush()

with io.open(out_list_path, "w", encoding="utf-8", newline="\n") as w:
    for p in files:
        w.write(p + "\n")

print("Wrote files:")
for p in files:
    print(" -", p)
PY

          echo "files<<EOF" >> "$GITHUB_OUTPUT"
          cat .github/monolith_split_files.txt >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create branch and commit changes
        run: |
          set -euo pipefail
          BRANCH="${{ steps.vars.outputs.branch }}"
          git switch -c "$BRANCH"
          git config user.name "DLX Monolith Bot"
          git config user.email "actions@users.noreply.github.com"
          git add -A
          # Remove the monolith within the PR so base never keeps it
          git rm -f .bootstrap/monolith.mem || true
          git add -A
          git commit -m "Monolith Split (PR): expand and remove .bootstrap/monolith.mem"
          git push --set-upstream origin "$BRANCH"

      - name: Open Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.vars.outputs.branch }}
          base: deploy/coming-soon
          title: "Monolith Split: expand .bootstrap/monolith.mem into files"
          body: |
            This PR was auto-created by **DLX Monolith Splitter (PR Mode)**.

            **Summary**
            - Expanded `.bootstrap/monolith.mem` into versioned files
            - Removed `.bootstrap/monolith.mem` in this PR branch (prevents re-triggers)
            - Target base: `deploy/coming-soon`

            **Files written**
            ```
            ${{ steps.split.outputs.files }}
            ```

            _Merging this PR finalizes the split and removes the monolith from the deploy branch._
          labels: ops, mem, monolith-split
          draft: false

      - name: Enable auto-merge (squash)
        if: ${{ steps.cpr.outputs['pull-request-number'] }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          pull-request-number: ${{ steps.cpr.outputs['pull-request-number'] }}
          merge-method: squash

      - name: Echo PR URL
        run: echo "PR URL: ${{ steps.cpr.outputs.pull-request-url }}"
---END FILE---

---FILE: .github/workflows/monolith-split.yml---
# DISABLED: replaced by PR Mode workflow.
# Keeping file for history; now runs only on manual dispatch.
name: DLX Monolith Splitter (LEGACY - Disabled)
on:
  workflow_dispatch: {}
jobs:
  noop:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Legacy monolith splitter disabled. Use monolith-split-pr.yml (PR Mode)."
---END FILE---

---FILE: docs/ops/monolith-pr-mode.md---
# DLX Monolith â€” PR Mode

**What it does**
- Expands `.bootstrap/monolith.mem` into versioned files on a temp branch.
- Removes the monolith in the PR branch.
- Opens a **Pull Request** targeting `deploy/coming-soon`.
- **Auto-merges** (squash) when checks pass.

**How to use**
1. Create `.bootstrap/monolith.mem` on `deploy/coming-soon`.
2. Wait for **DLX Monolith Splitter (PR Mode)** to open a PR.
3. PR auto-merges when checks are green. Result: files on `deploy/coming-soon`, monolith gone.

**Why PR Mode**
- Traceability (PR links for audits).
- Branch protection compliant.
- Safer than direct commits.
---END FILE---
